import subprocess
import os
import signal
import xmlrpclib
from datetime import datetime
from celery import Celery
from multiprocessing import Process

app = Celery('tasks', broker='amqp://<%=rabbit_user%>:<%=rabbit_pass%>@<%=rabbit_ip%>/<%=rabbit_vhost%>')
proxy = xmlrpclib.ServerProxy("http://<%=user_ip%>:1138/")

nb_tasks = 0
first = True
last_second = 0

command = 'celery -A tasks worker --loglevel=info -n <%=worker_name%>_<%=worker_nb%> --concurrency=<%=concurrency%> -Q <%=worker_name%>_<%=worker_nb%>'
process = subprocess.Popen(command, stderr=subprocess.PIPE, stdout=subprocess.PIPE, shell=True)

def report_ratio_basic(unique_id, ratio):
    proxy.report_ratio(unique_id, ratio)

def report_ratio(arguments):
    p = Process(target=report_ratio_basic, args=arguments)
    p.start()

try:
    for line in iter(process.stderr.readline, ''):
        if 'succeeded' in line:
            line_list = line.split(' ')
            nb_tasks += 1
            dt = datetime.strptime(line_list[0][1:] + " " + line_list[1][:-1], '%Y-%m-%d %H:%M:%S,%f')
            print line_list[0][1:] + ":" +line_list[1][:-1], line_list[-2][:-2]

            if first:
                first_dt = dt
                first = False
            diff = dt - first_dt
            ratio = nb_tasks/(diff.seconds + 1.0)

            if (diff.seconds + 1) % 5 == 0 and  diff.seconds + 1 != last_second:
                report_ratio(("<%=worker_name%>_<%=worker_nb%>", ratio))
            last_second = diff.seconds + 1

except KeyboardInterrupt:
    os.killpg(process.pid, signal.SIGTERM)
except Exception as e:
    print e
    os.system("ps auwx | grep 'celery' | grep 'worker' | awk '{print $2}' | xargs kill -9")
